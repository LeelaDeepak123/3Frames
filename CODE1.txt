import java.io.*;
import java.util.ArrayList;
import java.util.List;

class Delta {
    private String content;

    public Delta(String content) {
        this.content = content;
    }

    public String apply(String base) {
        // Implement binary diffing and patching logic here
        // For simplicity, just appending the delta content in this example
        return base + content;
    }
}

class TreeNode {
    private String version;
    private Delta delta;
    private TreeNode left;
    private TreeNode right;

    public TreeNode(String version, Delta delta) {
        this.version = version;
        this.delta = delta;
    }

    public String applyDelta(String base) {
        return delta.apply(base);
    }
}

class VersionedFile {
    private TreeNode root;

    public VersionedFile(String baseVersion) {
        this.root = new TreeNode("Base", new Delta(baseVersion));
    }

    public void addDelta(String version, Delta delta) {
        // Assume left child represents the previous version, right child represents the new version
        TreeNode newVersionNode = new TreeNode(version, delta);
        newVersionNode.left = root;
        root = newVersionNode;
    }

    public void saveToFile(String filename) {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(filename))) {
            oos.writeObject(root);
            System.out.println("Saved to file: " + filename);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static VersionedFile loadFromFile(String filename) {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(filename))) {
            TreeNode loadedRoot = (TreeNode) ois.readObject();
            VersionedFile loadedFile = new VersionedFile("");
            loadedFile.root = loadedRoot;
            return loadedFile;
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
            return null;
        }
    }

    public String generateVersion(String version) {
        return generateVersion(root, version);
    }

    private String generateVersion(TreeNode node, String version) {
        if (node == null) {
            return null;
        }

        if (node.version.equals(version)) {
            return applyDeltas(node);
        }

        String leftResult = generateVersion(node.left, version);
        String rightResult = generateVersion(node.right, version);

        if (leftResult != null) {
            return leftResult;
        } else {
            return rightResult;
        }
    }

    private String applyDeltas(TreeNode node) {
        StringBuilder result = new StringBuilder(node.delta.apply(root.delta.apply("")));
        TreeNode current = node.left;

        while (current != null) {
            result.insert(0, current.delta.apply(""));
            current = current.left;
        }

        return result.toString();
    }

    public static void main(String[] args) {
        // Example usage
        VersionedFile versionedFile = new VersionedFile("Base content");
        versionedFile.addDelta("Version 1", new Delta(" Delta 1"));
        versionedFile.addDelta("Version 2", new Delta(" Delta 2"));

        versionedFile.saveToFile("versioned_file.ser");

        VersionedFile loadedFile = VersionedFile.loadFromFile("versioned_file.ser");

        // Generate a specific version
        String desiredVersion = "Version 1";
        String reconstructedVersion = loadedFile.generateVersion(desiredVersion);
        System.out.println(reconstructedVersion);
    }
}
